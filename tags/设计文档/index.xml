<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>设计文档 on iFixedBug.com</title><link>https://www.ifixedbug.com/tags/%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/</link><description>Recent content in 设计文档 on iFixedBug.com</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 05 Apr 2024 17:10:22 +0000</lastBuildDate><atom:link href="https://www.ifixedbug.com/tags/%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/index.xml" rel="self" type="application/rss+xml"/><item><title>动态api设计文档</title><link>https://www.ifixedbug.com/posts/%E5%8A%A8%E6%80%81api%E8%AE%BE%E8%AE%A1/</link><pubDate>Fri, 05 Apr 2024 17:10:22 +0000</pubDate><guid>https://www.ifixedbug.com/posts/%E5%8A%A8%E6%80%81api%E8%AE%BE%E8%AE%A1/</guid><description>设计目标 # 目标： 用模板引擎的方式撰写一段Sql脚本模板，并指明对应的参数含义，发布后前端可以通过 /api/dynamic-api/invoke/my-api-name的方式直接调用，且调用支持多种HTTP方法和以不同的方式传递参数，如：查询参数、body和header参数方式。
基本过程 # api定义(ApiDefinition): 定义一个api，指明唯一的name和备注信息等，并指明它的sql脚本和数据库链接等。
连接池(ConnectionPool): 多个api请求数据库的数据时共享同一个连接池，减少建立链接的过程。为api指定连接池，即指明对应的数据库链接地址，则直接执行调用；
api参数(ApiParameter): 定义一个api需要的参数，该参数的名称需要上述sql脚本使用的脚本保持一致。
配置动态api的过程如下：
提供表单，用户填写api的基本信息，如：英文名称、请求方法、备注信息等； 用户填写api运行时要执行的sql脚本，注意这里要使用到模板引擎，有很多判空的逻辑。本系统推荐使用liquid模板。 为该api指明sql脚本执行时调用哪个链接，即使用哪个数据库。弹出连接池列表选中一个。 用户填写api是否支持分页和排序，若支持，则自动含有分页和排序对应的查询参数，如：pageSize\MaxResult\Sorting等。 用户为该api添加参数，参数分为：查询参数、body参数和header参数，另外也需要添加参数的名称。这些参数需要与第2步中，脚本引擎引用的变量名称保持一致。 发布该api，配置该api的可访问permissions。 测试api的可用性，提供参数的输入界面，点击测试后能返回对应的结果。 liquid模板的sql脚本实例如下：
{% assign param1 = &amp;#39;value1&amp;#39; %} {% assign param2 = &amp;#39;value2&amp;#39; %} {% assign param3 = null %} {% assign sql_query = &amp;#34;SELECT * FROM your_table WHERE 1=1&amp;#34; %} {% if param1 != null %} {% assign sql_query = sql_query | append: &amp;#34; AND column1 = &amp;#39;&amp;#34; | append: param1 | append: &amp;#34;&amp;#39;&amp;#34; %} {% endif %} {% if param2 !</description></item></channel></rss>