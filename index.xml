<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>iFixedBug.com</title><link>https://www.ifixedbug.com/</link><description>Recent content on iFixedBug.com</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 05 Apr 2024 17:10:22 +0000</lastBuildDate><atom:link href="https://www.ifixedbug.com/index.xml" rel="self" type="application/rss+xml"/><item><title>动态api设计文档</title><link>https://www.ifixedbug.com/posts/%E5%8A%A8%E6%80%81api%E8%AE%BE%E8%AE%A1/</link><pubDate>Fri, 05 Apr 2024 17:10:22 +0000</pubDate><guid>https://www.ifixedbug.com/posts/%E5%8A%A8%E6%80%81api%E8%AE%BE%E8%AE%A1/</guid><description>设计目标 # 目标： 用模板引擎的方式撰写一段Sql脚本模板，并指明对应的参数含义，发布后前端可以通过 /api/dynamic-api/invoke/my-api-name的方式直接调用，且调用支持多种HTTP方法和以不同的方式传递参数，如：查询参数、body和header参数方式。该设计思路与： http://www.51dbapi.com 类似。
基本过程 # api定义(ApiDefinition): 定义一个api，指明唯一的name和备注信息等，并指明它的sql脚本和数据库链接等。
连接池(ConnectionPool): 多个api请求数据库的数据时共享同一个连接池，减少建立链接的过程。为api指定连接池，即指明对应的数据库链接地址，则直接执行调用；
api参数(ApiParameter): 定义一个api需要的参数，该参数的名称需要上述sql脚本使用的脚本保持一致。
配置动态api的过程如下：
提供表单，用户填写api的基本信息，如：英文名称、请求方法、备注信息等； 用户填写api运行时要执行的sql脚本，注意这里要使用到模板引擎，有很多判空的逻辑。本系统推荐使用liquid模板。 为该api指明sql脚本执行时调用哪个链接，即使用哪个数据库。弹出连接池列表选中一个。 用户填写api是否支持分页和排序，若支持，则自动含有分页和排序对应的查询参数，如：pageSize\MaxResult\Sorting等。 用户为该api添加参数，参数分为：查询参数、body参数和header参数，另外也需要添加参数的名称。这些参数需要与第2步中，脚本引擎引用的变量名称保持一致。 发布该api，配置该api的可访问permissions。 测试api的可用性，提供参数的输入界面，点击测试后能返回对应的结果。 liquid模板的sql脚本实例如下：
{% assign param1 = &amp;#39;value1&amp;#39; %} {% assign param2 = &amp;#39;value2&amp;#39; %} {% assign param3 = null %} {% assign sql_query = &amp;#34;SELECT * FROM your_table WHERE 1=1&amp;#34; %} {% if param1 != null %} {% assign sql_query = sql_query | append: &amp;#34; AND column1 = &amp;#39;&amp;#34; | append: param1 | append: &amp;#34;&amp;#39;&amp;#34; %} {% endif %} {% if param2 !</description></item><item><title>Linux备忘</title><link>https://www.ifixedbug.com/posts/linux%E5%A4%87%E5%BF%98%E5%BD%95/</link><pubDate>Fri, 05 Apr 2024 12:12:22 +0000</pubDate><guid>https://www.ifixedbug.com/posts/linux%E5%A4%87%E5%BF%98%E5%BD%95/</guid><description>Linux # npm install -g nrm nrm ls nrm use taobaoMacBook 安装brew以及修改镜像
cd &amp;#34;$(brew --repo)&amp;#34; git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git cd &amp;#34;$(brew --repo)/Library/Taps/homebrew/homebrew-core&amp;#34; git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git echo &amp;#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&amp;#39; &amp;gt;&amp;gt; ~/.zshrcsource ~/.zshrc参考网址：https://www.cnblogs.com/feiquan/p/13267284.html
wsl2安装Ubuntu20.04 LTS版本 # 添加删除命令执行后要重启。 安装wsl_update_x64.msi 要重启。在微软商店安装最新版。 记住在ps中设置Ubuntu20.04默认用户的口令为： ubuntu2004 config &amp;ndash;default-user root ubuntu2004 是win10系统中存在的命令。
SSH协议 # openssh是一个可以用来产生rsa密钥对的命令行工具。需要更新到最新版，以前的安装的太老了。导致使用的时候有错误（chmod 600 命令于此有关）。
下载最新的openssh产生密钥对 ssh-keygen -t rsa 密钥对会在/home/Zigzag/.ssh/下，此时需要对id_rsa进行权限变更，可以使用cmder执行如下命令： chmod 600 /home/Zigzag/.ssh/id_rsa 把id_rsa.pub字符串拷贝到centos服务器上，使用cmder命令： scp id_rsa.pub root@123.45.67.8:~/.ssh会提示输入密码，输入后即可，点击yes，会在本地填入known_hosts，是来与服务器的公钥。等待客户端加密使用。
登录CentOS服务器，将id_rsa.pub里的文件写入到~/.ssh/authorized_keys里。 cat ./id_rsa.pub &amp;gt;&amp;gt; authorized_keys然后重启ssh服务</description></item><item><title>Oracle备忘录</title><link>https://www.ifixedbug.com/posts/oracle%E5%A4%87%E5%BF%98%E5%BD%95/</link><pubDate>Fri, 05 Apr 2024 12:12:22 +0000</pubDate><guid>https://www.ifixedbug.com/posts/oracle%E5%A4%87%E5%BF%98%E5%BD%95/</guid><description>Oracle # 倒序查询某表的最后100条记录，并正序排列 # select * from (select * from FAC_HEAT_CONSUMPTION t order by id desc) where rownum &amp;lt; 100 order by id select * from (select * from HS_CHEMICAL_IRON t order by id desc OFFSET 0 ROWS FETCH NEXT 100 ROWS ONLY) order by id从0开始，获取100个，OFFSET 0 ROWS可以省略掉。
删除sys.dbms_scheduler.create_job创建的日志 # begin sys.dbms_scheduler.create_job(job_name =&amp;gt; &amp;#39;ARIMSGTEST.UPDATE_PL_JOB&amp;#39;, job_type =&amp;gt; &amp;#39;STORED_PROCEDURE&amp;#39;, job_action =&amp;gt; &amp;#39;arimsgtest.update_pl_job&amp;#39;, start_date =&amp;gt; to_date(null), repeat_interval =&amp;gt; &amp;#39;Freq=Hourly;Interval=1&amp;#39;, end_date =&amp;gt; to_date(null), job_class =&amp;gt; &amp;#39;DEFAULT_JOB_CLASS&amp;#39;, enabled =&amp;gt; true, auto_drop =&amp;gt; false, comments =&amp;gt; &amp;#39;&amp;#39;); end; / SELECT * FROM User_Scheduler_Jobs; // 查看作业 SELECT * from All_scheduler_job_log where owner= &amp;#39;ARIMSGTEST&amp;#39; and job_name= &amp;#39;UPDATE_PL_JOB2&amp;#39; select * from All_scheduler_job_run_details where owner= &amp;#39;ARIMSGTEST&amp;#39; and job_name= &amp;#39;UPDATE_PL_JOB2&amp;#39; Delete from all_scheduler_job_run_details where owner= &amp;#39;ARIMSGTEST&amp;#39; and job_name= &amp;#39;UPDATE_PL_JOB2&amp;#39;logging_level——日志记录级别（DBMS_SCHEDULER.</description></item><item><title>JS知识点总结</title><link>https://www.ifixedbug.com/posts/js%E6%9D%82%E9%A1%B9/</link><pubDate>Tue, 05 Mar 2024 12:12:22 +0000</pubDate><guid>https://www.ifixedbug.com/posts/js%E6%9D%82%E9%A1%B9/</guid><description>基础知识 # 移除一个对象的某个属性 # const removeProperty = (propKey, { [propKey]: propValue, ...rest }) =&amp;gt; rest; object = removeProperty(&amp;#39;a&amp;#39;, object);https://stackoverflow.com/questions/208105/how-do-i-remove-a-property-from-a-javascript-object/52301527#52301527
$ npm install -g cnpm --registry=https://registry.npmmirror.comnpm install -g nrm nrm ls nrm use taobao // 注意npm publish 到 npm官方站点后记得切换到官方源，否则看不到最新的版本 // 旧地址2022年(今年)5月份停止解析 npm config set registry http://registry.npmmirror.com ts项目不识别@符号的相对路径设置 # 在tsconfig.json 或者jsconfig.json中，配置 compilerOptions 的路径，加入：
&amp;#34;paths&amp;#34;: { &amp;#34;@/*&amp;#34;: [ &amp;#34;./src/*&amp;#34;] } 直接运行js字符串代码 # 引用： https://stackoverflow.com/questions/939326/execute-javascript-code-stored-as-a-string
方法一：使用 Function，注意：如何为Function添加参数？ //Executes immediately // 注意使用return， 不然没有返回值。 function stringToFunctionAndExecute(str) { let func = new Function(str); return (func()); // &amp;lt;--- note the parenteces } //Executes when called function stringToFunctionOnly(str) { let func = new Function(str); return func; } // 有参数的Function let func = new Function ([arg1[, arg2[, .</description></item><item><title>OPC DA转成OPC UA</title><link>https://www.ifixedbug.com/posts/opu-da%E8%BD%AC%E6%88%90ua%E7%9A%84%E6%96%B9%E6%B3%95/</link><pubDate>Tue, 05 Mar 2024 12:12:22 +0000</pubDate><guid>https://www.ifixedbug.com/posts/opu-da%E8%BD%AC%E6%88%90ua%E7%9A%84%E6%96%B9%E6%B3%95/</guid><description>OPC # OPC DA（Classic） 和OPC UA的链接方法 # 在仅支持OPC DA 2.0的OPC SERVER上部署代理程序（COM Wrapper），然后发布成 UA SERVER。从： https://github.com/OPCFoundation/UA-.NET-Legacy 下载兼容版的UA-.NET，因为是源代码基于.net framework3.5编写的，故3.5~4.5.1之间的framework都可以运行。因为要兼容windows XP系统，XP最新只能到Framework4.0， 故改成4.0的框架。 几个重要的配置，在Opc.Ua.ComServerWrapper.Config.xml文件中：
&amp;lt;BaseAddresses&amp;gt; &amp;lt;ua:String&amp;gt;opc.tcp://localhost:48400/UA/ComServerWrapper&amp;lt;/ua:String&amp;gt; &amp;lt;ua:String&amp;gt;http://localhost:48401/UA/ComServerWrapper&amp;lt;/ua:String&amp;gt; &amp;lt;/BaseAddresses&amp;gt;以上指明发布的ua地址，tcp和http都可以。
&amp;lt;ServerSecurityPolicy&amp;gt; &amp;lt;SecurityMode&amp;gt;None_1&amp;lt;/SecurityMode&amp;gt; &amp;lt;SecurityPolicyUri&amp;gt;http://opcfoundation.org/UA/SecurityPolicy#None&amp;lt;/SecurityPolicyUri&amp;gt; &amp;lt;SecurityLevel&amp;gt;0&amp;lt;/SecurityLevel&amp;gt; &amp;lt;/ServerSecurityPolicy&amp;gt;以上指明认证方式，把其他的去掉，只保留不需认证方式。其他认证方式暂时没有研究。
&amp;lt;ComClientConfiguration i:type=&amp;#34;ComDaClientConfiguration&amp;#34;&amp;gt; &amp;lt;ServerUrl&amp;gt;opc.com://localhost/ProcessIT.SimulationSvr.1&amp;lt;/ServerUrl&amp;gt; &amp;lt;ServerName&amp;gt;DA&amp;lt;/ServerName&amp;gt; &amp;lt;MaxReconnectWait&amp;gt;10000&amp;lt;/MaxReconnectWait&amp;gt; &amp;lt;SeperatorChars&amp;gt;&amp;lt;/SeperatorChars&amp;gt; &amp;lt;AvailableLocales&amp;gt; &amp;lt;ua:String&amp;gt;en-US&amp;lt;/ua:String&amp;gt; &amp;lt;ua:String&amp;gt;de-DE&amp;lt;/ua:String&amp;gt; &amp;lt;ua:String&amp;gt;ja-JP&amp;lt;/ua:String&amp;gt; &amp;lt;/AvailableLocales&amp;gt; &amp;lt;BrowseToNotSupported&amp;gt;false&amp;lt;/BrowseToNotSupported&amp;gt; &amp;lt;/ComClientConfiguration&amp;gt;以上配置本地的OPC Server地址和名称。该配置节可以有多个，ServerName可以换成语义化的名称，并不强求一致。 运行UA COM Server Wrapper.sln项目，编译后有UA COM Server Wrapper.exe，直接使用会报错，需要拷贝Opc.Ua.CertificateGenerator.exe，产生证书。 把该程序拷贝到OPC Server的机器上，配置本地的OPC Server地址和名称。双击UA COM Server Wrapper.exe运行，会产生一个地址：opc.tcp://39.107.78.139:8888/UA/ComServerWrapper，使用一般的OPC UA 客户端，点击链接即可浏览数据了。
Modbus # 线圈状态/输入状态/保持寄存器/输入寄存器: coilStatus/inputStatus/holdingRegister/inputRegister</description></item><item><title/><link>https://www.ifixedbug.com/archives/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.ifixedbug.com/archives/</guid><description/></item><item><title>Search</title><link>https://www.ifixedbug.com/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.ifixedbug.com/search/</guid><description/></item><item><title>text</title><link>https://www.ifixedbug.com/docs/example/folder_1/text/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.ifixedbug.com/docs/example/folder_1/text/</guid><description> h2 # h3 # h4 #</description></item><item><title>关于</title><link>https://www.ifixedbug.com/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.ifixedbug.com/about/</guid><description> 关于我 # 曾经写过很多代码，都是垃圾。
现在不写代码，但是关心代码。
因为名字起得不好，误入钢铁行业，从读研那一天起已注定一辈子的事业。
折腾过，但无果。不够聪敏，没有特质，不是那块料。
爱音乐，爱电影，爱代码。
不爱运动，没有什么追求。
爱吃麻辣，爱喝啤酒，肚子有点大。
不爱说话，心思重，没什么格局。
知天命，尽人事。
好吃好喝，或者留下点什么。
关于博客 # 2013年10月3日的那个下午，我在一个还能抽烟的咖啡馆注册了一个微信公众号，名字叫麻花段子。三个月前我刚经历一场大的手术，术后容光焕发若获新生，对世界充满了好奇。那时候微信公众号出现一年，微信也才刚刚流行起来，一切都寂静无声。谁能料到今天的微信能制霸移动IM又装进一个万花筒，无数人在浪潮之巅靠着执行力和恒心赢得红利。
那天我群发了麻花段子的第一条消息，时间接着又悄悄地过去了十年。
年轻时的我喜欢各种段子，玩谐音的、回文的、反转的，总之充满了讽刺、世俗和一点点智慧，收集与改造它们变成了我的乐趣之一。这个转段子的习惯从百度hi、QQ签名、朋友圈、微博一直延伸到公众号。为此我注册了一个wow.so的域名，专门做了个网站收集段子。随后，公众号来了，注册了麻花段子。从10月到2014年的11月，断断续续摘抄了一些网络中的猎奇网文后再也没有更新，网站也因为so这个索马里后缀的域名越来越贵得离谱而注销。接着随之而来的是一场梦。
10年前的中关村创业大街，人头攒动，鸡血四溢，每个人都在谈论着几个亿的大项目。那时候3W咖啡的桌子还像黑熊家的床一样又大又舒服，我还像一个充满斗志的新手猎人冲动又好奇地打量着这个世界。每到周末我都会带着电脑，去那里喝一杯充满互联网泡沫的咖啡，顺便去中关村图书大厦看各种新上的技术书，晚上就坐特9绕着四环半圈回家，那真是一个充满希望的岁月。
也常常去光顾那里有个折扣很大的电子书店，后来没了，变成了京东奶茶店。奶茶妹妹不在奶茶店，后来奶茶店也没了。我恨奶茶妹妹。
10年后，人生渐渐活成了段子，也没了讽刺和戏谑的心境。而麻花段子的公众号还在，那些年关注过这个公众号的朋友们还在。他们作为青春岁月的参与者，就静静地躺在后台的用户列表里，虽然不多，但很熟悉。
麻花段子作为我个人青春的资产留了下来，但它没有什么价值了，故没有存在的必要了。所以我想将它改一个名字，发挥余热，作为个人的空间写一些技术文章和总结，也可能会和我20年前的QQ空间一样有一些吐槽。总之它会留作私用，传播价值不大。
所以，各位师长，朋友们，陌生人们，感谢你们的关注，江湖再见。</description></item></channel></rss>